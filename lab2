Ejercicio 1

def add_term(self, c, e):
        
        k = np.searchsorted(self.exps,e)
        if len(self.exps)==0 or k>len(self.exps)-1:
            self.exps = self.exps+[e]
            self.coefs = self.coefs+[c]
        elif self.exps[k]==e:
            self.coefs[k] = self.coefs[k]+c
        else:
            self.exps = self.exps[:k]+[e]+self.exps[k:]
            self.coefs = self.coefs[:k]+[c]+self.coefs[k:]
            
        print(len(self.coefs),len(self.exps))
       
        assert len(self.exps)==len(self.coefs), "must have the same number of exps and coefs"
        return self



Ejercicio 2

 def sum(self, q):
        r = self.__class__()
        for i, j in zip(q.coefs, q.exps):
             r.add_term(i,j)
        for a, b in zip(self.coefs, self.exps):
            r.add_term(a,b)
        return r
        

Ejercicio 3

def add_term(self, c, e):
        max_exp = len(self.coefs)-1
        aux = e
        if e > max_exp:
            while aux > max_exp:
                self.coefs = self.coefs+[0]
                aux = aux-1
            self.coefs[e]=c
        else:
            self.coefs[e]=self.coefs[e]+c
        return self

Ejercicio 4

import numpy as np
def add_lists(a,b):
    tam_a = len(a)
    tam_b = len(b)
    if tam_a < tam_b:
        while tam_b > tam_a: 
            a = a+[0]
            tam_b = tam_b-1
    elif tam_b < tam_a:
        while tam_a > tam_b:
            b = b+[0]
            tam_a = tam_a-1
    na = np.array(a)
    nb = np.array(b)
    return na+nb


Ejercicio 5

def add_lists(a,b):
    tam_a = len(a)
    tam_b = len(b)
    if tam_a < tam_b:
        while tam_b > tam_a: 
            a = a+[0]
            tam_b = tam_b-1
    elif tam_b < tam_a:
        while tam_a > tam_b:
            b = b+[0]
            tam_a = tam_a-1
    na = np.array(a)
    nb = np.array(b)
    return na+nb

class Pol5:
    
    def __init__(self):
        self.coefs = [0]
        
    def add_term(self, c, e):
        max_exp = len(self.coefs)-1
        aux = e
        if e > max_exp:
            while aux > max_exp:
                self.coefs = self.coefs+[0]
                aux = aux-1
            self.coefs[e]=c
        else:
            self.coefs[e]=self.coefs[e]+c
        return self

    def sum(self, q):
        r = list(add_lists(self.coefs,q.coefs))
        Pol_aux = Pol5()
        Pol_aux.coefs = r
        return Pol_aux
        
  

Ejercicio 


class Pol6:
    
    def __init__(self):
        self.coefs = []
        
    def add_term(self, c, e):
        
        max_exp = len(self.coefs)-1
        aux = e
        if e > max_exp:
            while aux > max_exp:
                self.coefs = self.coefs+[0]
                aux = aux-1
            self.coefs[e]=c
        else:
            self.coefs[e]=self.coefs[e]+c
        return self

    def sum(self, q):
        r = list(add_lists(self.coefs,q.coefs))
        Pol_aux = self.__class__()
        Pol_aux.coefs = r
        return Pol_aux
    
    def mult(self, q):
        r = self.__class__()
        aux1= len(self.coefs)
        aux2 = len(q.coefs)
        for i in range(len(self.coefs)):
            for j in range(len(q.coefs)):
                r.add_term(self.coefs[i]*q.coefs[j], i+j )
        print (r.coefs)
        return r
    
    def show(self):
        s = "+".join(["%s^{%s}"%(str(c) if e==0 else str(c)+"x" if c!=1 else "x", str(e) if e not in [0,1] else "") for e,c in enumerate(self.coefs) if c!=0])
        s = s.replace("+-", "-")
        return Math(s)
